// source: registry/ingest/ingest.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.ingest.IngestRequest', null, global);
goog.exportSymbol('proto.ingest.IngestRequest.MaskingMetadata', null, global);
goog.exportSymbol('proto.ingest.IngestResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ingest.IngestRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ingest.IngestRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ingest.IngestRequest.displayName = 'proto.ingest.IngestRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ingest.IngestRequest.MaskingMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ingest.IngestRequest.MaskingMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ingest.IngestRequest.MaskingMetadata.displayName = 'proto.ingest.IngestRequest.MaskingMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ingest.IngestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ingest.IngestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ingest.IngestResponse.displayName = 'proto.ingest.IngestResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ingest.IngestRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ingest.IngestRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ingest.IngestRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ingest.IngestRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    har: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pathHint: jspb.Message.getFieldWithDefault(msg, 2, ""),
    apiId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    versionId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    customerId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    maskingMetadata: (f = msg.getMaskingMetadata()) && proto.ingest.IngestRequest.MaskingMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ingest.IngestRequest}
 */
proto.ingest.IngestRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ingest.IngestRequest;
  return proto.ingest.IngestRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ingest.IngestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ingest.IngestRequest}
 */
proto.ingest.IngestRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHar(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathHint(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersionId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerId(value);
      break;
    case 6:
      var value = new proto.ingest.IngestRequest.MaskingMetadata;
      reader.readMessage(value,proto.ingest.IngestRequest.MaskingMetadata.deserializeBinaryFromReader);
      msg.setMaskingMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ingest.IngestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ingest.IngestRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ingest.IngestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ingest.IngestRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHar();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPathHint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getApiId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVersionId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCustomerId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMaskingMetadata();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ingest.IngestRequest.MaskingMetadata.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.ingest.IngestRequest.MaskingMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ingest.IngestRequest.MaskingMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ingest.IngestRequest.MaskingMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestHeaderMasksMap: (f = msg.getRequestHeaderMasksMap()) ? f.toObject(includeInstance, undefined) : [],
    requestCookieMasksMap: (f = msg.getRequestCookieMasksMap()) ? f.toObject(includeInstance, undefined) : [],
    requestFieldMasksStringMap: (f = msg.getRequestFieldMasksStringMap()) ? f.toObject(includeInstance, undefined) : [],
    requestFieldMasksNumberMap: (f = msg.getRequestFieldMasksNumberMap()) ? f.toObject(includeInstance, undefined) : [],
    responseHeaderMasksMap: (f = msg.getResponseHeaderMasksMap()) ? f.toObject(includeInstance, undefined) : [],
    responseCookieMasksMap: (f = msg.getResponseCookieMasksMap()) ? f.toObject(includeInstance, undefined) : [],
    responseFieldMasksStringMap: (f = msg.getResponseFieldMasksStringMap()) ? f.toObject(includeInstance, undefined) : [],
    responseFieldMasksNumberMap: (f = msg.getResponseFieldMasksNumberMap()) ? f.toObject(includeInstance, undefined) : [],
    queryStringMasksMap: (f = msg.getQueryStringMasksMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ingest.IngestRequest.MaskingMetadata}
 */
proto.ingest.IngestRequest.MaskingMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ingest.IngestRequest.MaskingMetadata;
  return proto.ingest.IngestRequest.MaskingMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ingest.IngestRequest.MaskingMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ingest.IngestRequest.MaskingMetadata}
 */
proto.ingest.IngestRequest.MaskingMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getRequestHeaderMasksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 2:
      var value = msg.getRequestCookieMasksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 3:
      var value = msg.getRequestFieldMasksStringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = msg.getRequestFieldMasksNumberMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 5:
      var value = msg.getResponseHeaderMasksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 6:
      var value = msg.getResponseCookieMasksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 7:
      var value = msg.getResponseFieldMasksStringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = msg.getResponseFieldMasksNumberMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 9:
      var value = msg.getQueryStringMasksMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ingest.IngestRequest.MaskingMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ingest.IngestRequest.MaskingMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ingest.IngestRequest.MaskingMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestHeaderMasksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRequestCookieMasksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRequestFieldMasksStringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRequestFieldMasksNumberMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getResponseHeaderMasksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getResponseCookieMasksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getResponseFieldMasksStringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getResponseFieldMasksNumberMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getQueryStringMasksMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> request_header_masks = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.getRequestHeaderMasksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ingest.IngestRequest.MaskingMetadata} returns this
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.clearRequestHeaderMasksMap = function() {
  this.getRequestHeaderMasksMap().clear();
  return this;};


/**
 * map<string, string> request_cookie_masks = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.getRequestCookieMasksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ingest.IngestRequest.MaskingMetadata} returns this
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.clearRequestCookieMasksMap = function() {
  this.getRequestCookieMasksMap().clear();
  return this;};


/**
 * map<string, string> request_field_masks_string = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.getRequestFieldMasksStringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ingest.IngestRequest.MaskingMetadata} returns this
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.clearRequestFieldMasksStringMap = function() {
  this.getRequestFieldMasksStringMap().clear();
  return this;};


/**
 * map<string, string> request_field_masks_number = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.getRequestFieldMasksNumberMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ingest.IngestRequest.MaskingMetadata} returns this
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.clearRequestFieldMasksNumberMap = function() {
  this.getRequestFieldMasksNumberMap().clear();
  return this;};


/**
 * map<string, string> response_header_masks = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.getResponseHeaderMasksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ingest.IngestRequest.MaskingMetadata} returns this
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.clearResponseHeaderMasksMap = function() {
  this.getResponseHeaderMasksMap().clear();
  return this;};


/**
 * map<string, string> response_cookie_masks = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.getResponseCookieMasksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ingest.IngestRequest.MaskingMetadata} returns this
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.clearResponseCookieMasksMap = function() {
  this.getResponseCookieMasksMap().clear();
  return this;};


/**
 * map<string, string> response_field_masks_string = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.getResponseFieldMasksStringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ingest.IngestRequest.MaskingMetadata} returns this
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.clearResponseFieldMasksStringMap = function() {
  this.getResponseFieldMasksStringMap().clear();
  return this;};


/**
 * map<string, string> response_field_masks_number = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.getResponseFieldMasksNumberMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ingest.IngestRequest.MaskingMetadata} returns this
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.clearResponseFieldMasksNumberMap = function() {
  this.getResponseFieldMasksNumberMap().clear();
  return this;};


/**
 * map<string, string> query_string_masks = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.getQueryStringMasksMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ingest.IngestRequest.MaskingMetadata} returns this
 */
proto.ingest.IngestRequest.MaskingMetadata.prototype.clearQueryStringMasksMap = function() {
  this.getQueryStringMasksMap().clear();
  return this;};


/**
 * optional string har = 1;
 * @return {string}
 */
proto.ingest.IngestRequest.prototype.getHar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ingest.IngestRequest} returns this
 */
proto.ingest.IngestRequest.prototype.setHar = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path_hint = 2;
 * @return {string}
 */
proto.ingest.IngestRequest.prototype.getPathHint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ingest.IngestRequest} returns this
 */
proto.ingest.IngestRequest.prototype.setPathHint = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string api_id = 3;
 * @return {string}
 */
proto.ingest.IngestRequest.prototype.getApiId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ingest.IngestRequest} returns this
 */
proto.ingest.IngestRequest.prototype.setApiId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string version_id = 4;
 * @return {string}
 */
proto.ingest.IngestRequest.prototype.getVersionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ingest.IngestRequest} returns this
 */
proto.ingest.IngestRequest.prototype.setVersionId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string customer_id = 5;
 * @return {string}
 */
proto.ingest.IngestRequest.prototype.getCustomerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ingest.IngestRequest} returns this
 */
proto.ingest.IngestRequest.prototype.setCustomerId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional MaskingMetadata masking_metadata = 6;
 * @return {?proto.ingest.IngestRequest.MaskingMetadata}
 */
proto.ingest.IngestRequest.prototype.getMaskingMetadata = function() {
  return /** @type{?proto.ingest.IngestRequest.MaskingMetadata} */ (
    jspb.Message.getWrapperField(this, proto.ingest.IngestRequest.MaskingMetadata, 6));
};


/**
 * @param {?proto.ingest.IngestRequest.MaskingMetadata|undefined} value
 * @return {!proto.ingest.IngestRequest} returns this
*/
proto.ingest.IngestRequest.prototype.setMaskingMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ingest.IngestRequest} returns this
 */
proto.ingest.IngestRequest.prototype.clearMaskingMetadata = function() {
  return this.setMaskingMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ingest.IngestRequest.prototype.hasMaskingMetadata = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ingest.IngestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ingest.IngestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ingest.IngestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ingest.IngestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ingest.IngestResponse}
 */
proto.ingest.IngestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ingest.IngestResponse;
  return proto.ingest.IngestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ingest.IngestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ingest.IngestResponse}
 */
proto.ingest.IngestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ingest.IngestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ingest.IngestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ingest.IngestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ingest.IngestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.ingest);
